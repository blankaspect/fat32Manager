/*====================================================================*\

DiscretisedValue.java

Class: discretised value.

\*====================================================================*/


// PACKAGE


package uk.blankaspect.common.number;

//----------------------------------------------------------------------


// CLASS: DISCRETISED VALUE


/**
 * This class implements a means of storing a discrete value that has been mapped from a continuous value by a specified
 * {@linkplain IDiscretiser function}.
 */

public class DiscretisedValue
{

////////////////////////////////////////////////////////////////////////
//  Instance variables
////////////////////////////////////////////////////////////////////////

	/** The function that maps a continuous value to a discrete value. */
	private	IDiscretiser	discretiser;

	/** The discrete value. */
	private	int				discreteValue;

////////////////////////////////////////////////////////////////////////
//  Constructors
////////////////////////////////////////////////////////////////////////

	/**
	 * Creates a new instance of a discrete value that is mapped from a continuous value by the specified function.
	 *
	 * @param discretiser
	 *          the function that maps a continuous value to a discrete value.
	 */

	public DiscretisedValue(
		IDiscretiser	discretiser)
	{
		// Call alternative constructor
		this(discretiser, 0);
	}

	//------------------------------------------------------------------

	/**
	 * Creates a new instance of a discrete value that is mapped from a continuous value by the specified function.
	 *
	 * @param discretiser
	 *          the function that maps a continuous value to a discrete value.
	 * @param value
	 *          the initial discrete value.
	 */

	public DiscretisedValue(
		IDiscretiser	discretiser,
		int				value)
	{
		// Validate arguments
		if (discretiser == null)
			throw new IllegalArgumentException("Null discretiser");

		// Initialise instance variables
		this.discretiser = discretiser;
		discreteValue = value;
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods
////////////////////////////////////////////////////////////////////////

	/**
	 * Returns the last discrete value to have been generated by the discretising function through a call to either
	 * {@link #update(double)} or {@link #updateChanged(double)}.  If neither of those methods has been called, the
	 * initial discrete value is returned.
	 *
	 * @return the discrete value, as described above.
	 */

	public int getDiscreteValue()
	{
		return discreteValue;
	}

	//------------------------------------------------------------------

	/**
	 * Calls the discretising function on the specified value, sets the stored discrete value to the result, and returns
	 * the result.
	 *
	 * @param  value
	 *           the value that will be mapped by the discretising function.
	 * @return the result of applying the discretising function to {@code value}.
	 */

	public int update(
		double	value)
	{
		// Update discrete value
		discreteValue = discretiser.discretise(value);

		// Return discrete value
		return discreteValue;
	}

	//------------------------------------------------------------------

	/**
	 * Calls the discretising function on the specified value, sets the stored discrete value to the result, and returns
	 * {@code true} if the result is not equal to the previous stored discrete value.
	 *
	 * @param  value
	 *           the value that will be mapped by the discretising function.
	 * @return {@code true} if the result of applying the discretising function to {@code value} is not equal to the
	 *         previous stored discrete value.
	 */

	public boolean updateChanged(
		double	value)
	{
		// Get old discrete value
		int oldDiscreteValue = discreteValue;

		// Compare old and new discrete values; return result
		return (update(value) != oldDiscreteValue);
	}

	//------------------------------------------------------------------

}

//----------------------------------------------------------------------
